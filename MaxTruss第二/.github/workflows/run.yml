name: C/C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  make:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: make
        run: make

      - name: set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: run
        run: |
          python scripts/run.py

  cmake:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

  cuda:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 18.04 supports CUDA 10.1+ (gxx <= 8)
          - os: ubuntu-18.04
            cuda: "10.2"
            gcc: 8

    env:
      build_dir: "build"
      config: "Release"

    steps:
      - uses: actions/checkout@v2

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: |
          source ./scripts/actions/install_cuda_ubuntu.sh
          if [[ $? -eq 0 ]]; then
            # Set paths for subsequent steps, using ${CUDA_PATH}
            echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
            echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
            echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
            echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          fi
        shell: bash

      # Specify the correct host compilers
      - name: Install/Select gcc and g++
        run: |
          sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
          echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
          echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
      - name: Configure cmake
        id: configure
        run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

      - name: Configure Error Processing
        if: ${{ failure() && steps.configure.outcome == 'failure' }}
        working-directory: ${{ env.build_dir }}
        run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi

      - name: Build everything else
        working-directory: ${{ env.build_dir }}
        run: cmake --build . --target all --verbose -j `nproc`
